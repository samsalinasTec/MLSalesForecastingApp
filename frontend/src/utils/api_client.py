"""Utility functions to communicate with the FastAPI backend."""

from __future__ import annotations

import re
from typing import Any, Dict, List, Optional, Tuple

import httpx


class APIClient:
    """Thin HTTP client tailored to the MLSalesForecasting backend."""

    def __init__(self, base_url: str, timeout: float = 60.0) -> None:
        self.base_url = base_url.rstrip("/")
        self.timeout = timeout

    def _get_client(self) -> httpx.Client:
        return httpx.Client(base_url=self.base_url, timeout=self.timeout)

    def get_active_sorteos(self) -> Dict[str, Any]:
        """Fetch active draws grouped by ``SorteoType``."""

        with self._get_client() as client:
            response = client.get("/predictions/active")
            response.raise_for_status()
            return response.json()

    def create_predictions(
        self,
        sorteo_types: List[str],
        apply_smoothing: bool,
        force_recalculation: bool,
        save_to_bq: bool = False,
    ) -> Dict[str, Any]:
        """Trigger predictions for the selected ``SorteoType`` values."""

        payload = {
            "sorteo_types": sorteo_types,
            "apply_smoothing": apply_smoothing,
            "force_recalculation": force_recalculation,
            "save_to_bq": save_to_bq,
        }

        with self._get_client() as client:
            response = client.post("/predictions/", json=payload)
            response.raise_for_status()
            return response.json()

    def download_prediction_summary(self) -> Tuple[bytes, str]:
        """Download the CSV summary generated by the backend."""

        with self._get_client() as client:
            response = client.get("/predictions/summary/download")
            response.raise_for_status()

            filename = self._parse_filename(response.headers.get("content-disposition", ""))
            if not filename:
                filename = "resumen_predicciones.csv"

            return response.content, filename

    @staticmethod
    def _parse_filename(content_disposition: str) -> Optional[str]:
        """Extract the filename from a Content-Disposition header."""

        match = re.search(r"filename\*=UTF-8''([^;]+)", content_disposition)
        if match:
            return httpx.URL(match.group(1)).decoded

        match = re.search(r'filename="?([^";]+)"?', content_disposition)
        if match:
            return match.group(1)

        return None